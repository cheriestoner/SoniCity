# -*- coding: utf-8 -*-
"""FXH.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11yrXhGMUfIPKdZOR1DhY0WKzc2a87LV4
"""

import pandas as pd
import matplotlib.pyplot as plt
import ast

# Load the dataset
df = pd.read_csv('/mnt/reason_tags.csv')

# print('数据基本信息：')
# df.info()

# 查看数据集行数和列数
rows, columns = df.shape

# if rows < 100 and columns < 20:
    # 短表数据（行数少于100且列数少于20）查看全量数据信息
    # print('数据全部内容信息：')
    # print(df.to_csv(sep='\t', na_rep='nan'))
# else:
    # 长表数据查看数据前几行信息
    # print('数据前几行内容信息：')
    # print(df.head().to_csv(sep='\t', na_rep='nan'))

# Manually define a mapping of long sentences to short labels
short_label_mapping = {
    'The sound was loud/prominent.': 'Loud',
    'The sound was pleasant/enjoyable.': 'Pleasant',
    'The sound was typical of this place.': 'Typical',
    'The sound was unique/uncommon.': 'Unique',
    'The sound was quiet/subtle but meaningful.': 'Quiet & Meaningful',
    'The sound was annoying/disturbing.': 'Annoying',
    'Other (please specify): Sounds that can be found there over a longer period of time': 'Long - term Sounds',
}

# Filter out greenpark and sciencepark data, and handle NaN values
filtered_df = df[df['location'].isin(['greenpark', 'sciencepark'])].dropna(subset=['Survey Question 1: What influenced your choice of the four recorded sounds in each location?'])

# Parse the string representation of lists into actual lists
filtered_df['Survey Question 1: What influenced your choice of the four recorded sounds in each location?'] = filtered_df[
    'Survey Question 1: What influenced your choice of the four recorded sounds in each location?'
].apply(ast.literal_eval)

# Expand the lists in the column into separate rows
expanded_df = filtered_df.explode('Survey Question 1: What influenced your choice of the four recorded sounds in each location?')

# Group by location and influencing factor, and count the number of occurrences
grouped_df = expanded_df.groupby(['location', 'Survey Question 1: What influenced your choice of the four recorded sounds in each location?'])[
    'Survey Question 1: What influenced your choice of the four recorded sounds in each location?'
].count().unstack(fill_value=0).T

# Replace the long sentences with short labels in the grouped_df index
grouped_df = grouped_df.rename(index=short_label_mapping)

# Prepare data for the bar chart
greenpark_data = grouped_df.loc[:, 'greenpark']
sciencepark_data = grouped_df.loc[:, 'sciencepark']

# Set the font for Chinese characters
# plt.rcParams['font.sans-serif'] = ['WenQuanYi Zen Hei']

# Set the size of the bar chart
plt.figure(figsize=(12, 8))

# Set the width of the bars
bar_width = 0.35

# Set the positions of the bars on the x - axis
index = range(len(greenpark_data.index))

# Draw the bars for greenpark
plt.bar(index, greenpark_data, bar_width, label='Green park', color='#3F7D31', alpha=0.75)

# Draw the bars for sciencepark
plt.bar([i + bar_width for i in index], sciencepark_data, bar_width, label='Science park', color='#006896', alpha=0.75)

exticks=['Long - term \n Sounds', 'Annoying', 'Loud', 'Pleasant',
       'Quiet & \n Meaningful', 'Typical', 'Unique']

# Set the x - axis labels, y - axis label, and title
plt.xticks([i + bar_width/2 for i in index], exticks, rotation=45, fontsize=14)
plt.ylabel('Number of Occurrences', fontsize=14)
plt.title('Comparison of Influencing Factors between greenpark and sciencepark', fontsize=16)

# Add a legend
plt.legend()

# Add a new legend at the bottom for the short label mapping
# handles = []
# labels = []
# for long_label, short_label in short_label_mapping.items():
#     handles.append(plt.Rectangle((0, 0), 1, 1, fc='w', fill=False, edgecolor='none', linewidth=0))
#     labels.append(f'{short_label}: {long_label}')

# plt.figlegend(handles, labels, loc='lower center', ncol=2, fontsize=8)

# Adjust the layout to make room for the new legend
plt.subplots_adjust(bottom=0.3)

# Display the bar chart
plt.show()

# Define the taxonomy of tags
taxonomy = {
    'Source Type': ['Music', 'Traffic', 'Birds', 'Voice'],
    'Temporal': ['Loud', 'Medium loud', 'Soft', 'Getting louder', 'Varying over time', 'Getting softer', 'Continuous'],
    'Quality': ['Clear', 'Noisy', 'Chaotic', 'Harmonious', 'Controlled', 'Dynamic', 'Static', 'Moving', 'Melodic', 'Rhythmic'],
    'Context': ['Isolated', 'Standing out', 'Blended', 'Disappearing', 'Masked'],
    'Pleasantness': ['Beautiful', 'Nice', 'Uninteresting', 'Boring', 'Annoying', 'No emotion']
}

# Load the data
df = pd.read_csv('/mnt/reason_tags.csv')

# Filter out rows where 'tag' is '-'
df = df[df['tag']!= '-']

# Convert the string representation of lists in the 'tag' column to actual lists
df['tag'] = df['tag'].apply(lambda x: ast.literal_eval(x) if isinstance(x, str) else x)

# Explode the lists in the 'tag' column
exploded_df = df.explode('tag')

# Create a dictionary to store the frequency counts for each category and location
category_location_counts = {}

# Iterate over each category in the taxonomy
for category, tags in taxonomy.items():
    category_df = exploded_df[exploded_df['tag'].isin([tag.lower() for tag in tags])]
    location_counts = {}
    all_tags = set()
    for location in ['greenpark','sciencepark']:
        location_df = category_df[category_df['location'] == location]
        counts = location_df['tag'].value_counts()
        location_counts[location] = counts
        all_tags.update(counts.index)
    # Create a unified index of all tags for the category
    unified_index = sorted(list(all_tags))
    for location in location_counts:
        # Reindex the counts to the unified index and fill missing values with 0
        location_counts[location] = location_counts[location].reindex(unified_index, fill_value=0)
    category_location_counts[category] = location_counts

# Set up the matplotlib figure and axes
fig, axes = plt.subplots(len(category_location_counts), 1, figsize=(12, 5 * len(category_location_counts)))

# Set colors for each location
colors = {'greenpark': '#3F7D31','sciencepark':'#006896'}

# Width of each bar group and the space between bar groups
bar_width = 0.35

# print(category_location_counts)

LABBe = {'greenpark': 'Green park','sciencepark':'Science Park'}

DICCe = {'birds': 'Birds', 'music':'Music', 'traffic': 'Traffic', 'voice': 'Voice', 'continuous': 'Continuous', 'loud':'Loud', 'soft':'Soft', 'chaotic':'Chaotic', 'clear': 'Clear', 'controlled': 'Controlled', 'dynamic': 'Dynamic', 'harmonious':'Harmonious', 'melodic':'Melodic','moving':'Moving','noisy':'Noisy','rhythmic':'Rhythmic','blended':'Blended','dissappearing':'Dissappearing', 'isolated':'Isolated', 'annoying':'Annoying','beautiful':'Beautiful', 'boring':'Boring','nice':'Nice', 'uninteresting':'Uninteresting'}

# print(category_location_counts)

reindexed=[['Birds', 'Music', 'Traffic', 'Voice'],
  ['Continuous', 'Loud', 'Soft'],
  ['Chaotic', 'Clear', 'Controlled', 'Dynamic', 'Harmonious','Melodic','Moving','Noisy','Rhythmic'],
  ['Blended', 'Disappearing', 'Isolated'],
  ['Annoying', 'Beautiful', 'Boring', 'Nice', 'Uninteresting']]

# Iterate over each category and its counts, and plot the bar charts
for i, (category, location_counts) in enumerate(category_location_counts.items()):
    unified_index = location_counts['greenpark'].index
    num_tags = len(unified_index)
    index = range(num_tags)
    offset = 0

    # for indexx, data in enumerate(unified_index):
    #     for key, value in DICCe.items():
    #         if key in data:
    #             unified_index[indexx]=data.replace(key, DICCe[key])

    for location, counts in location_counts.items():
        # Create a new index for each location's bars within the group
        bar_index = [pos + offset for pos in index]
        axes[i].bar(bar_index, counts.values, width=bar_width, label=LABBe[location], color=colors[location], alpha=0.75)
        offset += bar_width
    axes[i].set_title(f'{category} Tag Frequencies', fontsize=16)
    # axes[i].set_xlabel('Tag')
    axes[i].set_ylabel('Frequency', fontsize=14)
    axes[i].set_xticks([pos + bar_width / 2 for pos in index])
    axes[i].set_xticklabels(reindexed[i],fontsize=14)
    axes[i].tick_params(axis='x')
    axes[i].legend()
    axes[i].set_ylim([0, 7])

# Adjust the layout to prevent overlapping
plt.tight_layout()

# Set the font for better display of Chinese characters
# plt.rcParams['font.sans-serif'] = ['WenQuanYi Zen Hei']
plt.rcParams['axes.unicode_minus'] = False

# Show the plots
plt.show()

# Load the data
df = pd.read_csv('/mnt/questionnaire-7.csv')

# print('数据基本信息：')
# df.info()

# View the number of rows and columns in the data
rows, columns = df.shape

# if rows < 100 and columns < 20:
    # Short - form data (行数少于100且列数少于20) view all data information
    # print('数据全部内容信息：')
    # print(df.to_csv(sep='\t', na_rep='nan'))
# else:
    # Long - form data view data first few lines information
    # print('数据前几行内容信息：')
    # print(df.head().to_csv(sep='\t', na_rep='nan'))

# Question 9 & 11

# Calculate the mean and standard deviation for each column
mean_q9 = df['9、您如何评价我们刚刚参观过的公园的声音景观的整体质量？1=音质很差7=优秀的音质How do you rate the overall quality of the soundscape in the green park that we just visited? 1=bad sound quality 7=excellent sound quality—'].mean()
std_q9 = df['9、您如何评价我们刚刚参观过的公园的声音景观的整体质量？1=音质很差7=优秀的音质How do you rate the overall quality of the soundscape in the green park that we just visited? 1=bad sound quality 7=excellent sound quality—'].std()

mean_q11 = df['11、您如何评价我们刚刚参观的科技园区的声音景观的整体质量？1=音质很差7=优秀的音质How do you rate the overall quality of the soundscape in the science park that we just visited?1=bad sound quality 7=excellent sound quality—'].mean()
std_q11 = df['11、您如何评价我们刚刚参观的科技园区的声音景观的整体质量？1=音质很差7=优秀的音质How do you rate the overall quality of the soundscape in the science park that we just visited?1=bad sound quality 7=excellent sound quality—'].std()

# Set up the graph
labels = ['Question 9', 'Question 11']
means = [mean_q9, mean_q11]
stds = [std_q9, std_q11]
colors = ['#3F7D31', '#006896']

# Set the font to display Chinese characters
# plt.rcParams['font.sans-serif'] = ['WenQuanYi Zen Hei']
plt.rcParams['axes.unicode_minus'] = False
plt.rcParams.update({'font.size': 14})

# Draw the error bar graph
plt.bar(labels, means, yerr=stds, capsize=5, color=colors, alpha=0.75)
plt.ylabel('Score', fontsize=14)
plt.title('Error Bar Graph for Question 9 and Question 11', fontsize=16)

plt.show()

# Question 10 & 12

# Calculate the mean and standard deviation for each column
mean_q10 = df['10、您在公园的录音，有什么深圳特色吗？1=没有特色，在任何城市能找到7=很有特色，只能在深圳找到或象征深圳Your recordings in the green park, how characteristic are they for Shenzhen?1=not characteristic, could be found in any other city7=very characteristic, can only be found in Shenzhen or symbolize Shenzhen—'].mean()
std_q10 = df['10、您在公园的录音，有什么深圳特色吗？1=没有特色，在任何城市能找到7=很有特色，只能在深圳找到或象征深圳Your recordings in the green park, how characteristic are they for Shenzhen?1=not characteristic, could be found in any other city7=very characteristic, can only be found in Shenzhen or symbolize Shenzhen—'].std()

mean_q12 = df['12、您在科技园区的录音，有什么深圳特色吗？1=没有特色，在任何城市能找到7=很有特色，只能在深圳找到或代表深圳Your recordings in the science park, how characteristic are they for Shenzhen?1=not characteristic, could be found in any other city7=very characteristic, can only be found in Shenzhen or symbolize Shenzhen—'].mean()
std_q12 = df['12、您在科技园区的录音，有什么深圳特色吗？1=没有特色，在任何城市能找到7=很有特色，只能在深圳找到或代表深圳Your recordings in the science park, how characteristic are they for Shenzhen?1=not characteristic, could be found in any other city7=very characteristic, can only be found in Shenzhen or symbolize Shenzhen—'].std()

# Set up the graph
labels = ['Question 10', 'Question 12']
means = [mean_q10, mean_q12]
stds = [std_q10, std_q12]
# colors = ['blue', 'red']

# Set the font to display Chinese characters
# plt.rcParams['font.sans-serif'] = ['WenQuanYi Zen Hei']
plt.rcParams['axes.unicode_minus'] = False

# Draw the error bar graph
plt.bar(labels, means, yerr=stds, capsize=5, color=colors,alpha=0.75)
plt.ylabel('Score')
plt.title('Error Bar Graph for Question 10 and Question 12',fontsize=16)

plt.show()
